<?php

namespace Tests\Feature;

use App\Models\User;
use Database\Seeders\PermissionsSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UserTest extends TestCase
{

//    protected function setUp(): void
//    {
//        parent::setUp(); // TODO: Change the autogenerated stub
//        //$this->seed(PermissionsSeeder::class);
//        Auth::login(User::first());
//
//    }

    public function test_can_create_new_user()
    {
        Auth::login(User::first());

        $data = User::factory()->make()->toArray();
        $data['password'] = 'password';

        $response = $this->postJson('/users', $data);
        $response->assertRedirect('users');

          // To make sure that the user has been added successfully to database

//        $user = User::latest('id')->first();
//        $this->assertEquals($user->name, $data['name']);
//        $this->assertEquals($user->email, $data['email']);
    }

    public function test_cant_create_new_user_when_name_not_exists()
    {
        Auth::login(User::first());

        $data = User::factory()->make()->toArray();
        $data['password'] = 'password';
        $data['name'] = null;
        $response = $this->postJson('/users', $data);
        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['name']);
    }

    public function test_redirect_user_to_login_page_if_not_logged_in()
    {
        $response = $this->get('/dashboard');
        $response->assertRedirect('/');
    }

    public function test_allow_user_to_visit_dashboard_page_if_logged_in()
    {
        Auth::login(User::first());

        $response = $this->get('/dashboard');
        $response->assertOk();
    }

}
